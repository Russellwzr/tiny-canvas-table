(()=>{"use strict";var __webpack_modules__={736:()=>{eval('\n;// CONCATENATED MODULE: ./src/core/types/CanvasTableColum.ts\n/**\n * CanvasTableRowColStyle interface is return in [[CustomRowColStyle]]\n */\n\n/**\n * Canvas Table Column Config\n */\n\n/**\n * Align text\n */\nlet Align = /*#__PURE__*/function (Align) {\n  Align[Align["left"] = 0] = "left";\n  Align[Align["center"] = 1] = "center";\n  Align[Align["right"] = 2] = "right";\n  return Align;\n}({});\n\n/**\n * Sort direction\n */\nlet Sort = /*#__PURE__*/function (Sort) {\n  Sort[Sort["ascending"] = 1] = "ascending";\n  Sort[Sort["descending"] = -1] = "descending";\n  return Sort;\n}({});\n;// CONCATENATED MODULE: ./src/core/CustomCanvasTable.ts\n\n\n/**\n * Interface to config style of CanvasTable\n */\n\nconst defaultConfig = {\n  backgroundColor: "white",\n  font: "arial",\n  fontColor: "black",\n  fontSize: 16,\n  fontStyle: "",\n  headerBackgroundColor: "#ecf1f5",\n  headerDrawSortArrow: true,\n  headerDrawSortArrowColor: "#5f6163",\n  headerFont: "arial",\n  headerFontColor: "black",\n  headerFontSize: 16,\n  headerFontStyle: "bold",\n  lineColor: "#e1e4e8",\n  selectLineColor: "#1c1cfc",\n  sepraBackgroundColor: "#faf9fb"\n};\nclass CustomCanvasTable {\n  r = 1;\n  data = [];\n  allowEdit = false;\n  headerHeight = 36;\n  cellHeight = 36;\n  dataIndex = undefined;\n  config = defaultConfig;\n  column = [];\n  eventDblClick = [];\n  eventClick = [];\n  eventClickHeader = [];\n  eventReCalcForScrollView = [];\n  eventEdit = [];\n  needToCalc = true;\n  isFocus = false;\n  minFontWidth = 1;\n  maxFontWidth = 1;\n  selectRowValue = null;\n  canvasHeight = 0;\n  canvasWidth = 0;\n  editData = {};\n  constructor(config) {\n    this.config = {\n      ...defaultConfig,\n      ...config\n    };\n  }\n\n  /**\n   * Is CanvasTable going to redraw in next frame\n   */\n  isPlanToRedraw() {\n    if (!this.requestAnimationFrame) {\n      return false;\n    }\n    return this.drawconf !== undefined && this.drawconf.fulldraw;\n  }\n\n  /**\n   * Let CanvasTable redraw\n   * @param config\n   */\n  askForReDraw(config) {\n    if (config === undefined || this.drawconf !== undefined && this.drawconf.fulldraw) {\n      this.drawconf = {\n        fulldraw: true\n      };\n    } else {\n      if (this.drawconf === undefined) {\n        this.drawconf = {\n          ...config,\n          ...{\n            fulldraw: false\n          }\n        };\n      }\n    }\n    if (this.requestAnimationFrame) {\n      return;\n    }\n    this.requestAnimationFrame = requestAnimationFrame(() => {\n      this.drawCanvas();\n    });\n  }\n  /**\n   * Recalc index and then redraw\n   * You need to call this if size of the data was change or columns witch was change is in active groupby or sort\n   */\n  askForReIndex() {\n    this.calcIndex();\n    this.askForReDraw();\n  }\n  setAllowEdit(allowEdit) {\n    this.allowEdit = allowEdit;\n  }\n  setRowColStyle(style) {\n    if (style === null) {\n      style = undefined;\n    }\n    if (this.customRowColStyle !== style) {\n      this.customRowColStyle = style;\n      this.askForReDraw();\n    }\n  }\n  setSort(sortCol) {\n    this.sortCol = sortCol;\n    this.askForReIndex();\n  }\n\n  /**\n   * Set new Data and then reindex and redraw\n   * @param data new Data\n   */\n  setData(data) {\n    if (data !== undefined) {\n      this.data = data;\n    }\n    this.askForReIndex();\n  }\n  updateColumns(col) {\n    this.column = [];\n    let i;\n    for (i = 0; i < col.length; i++) {\n      if (col[i].visible === false) {\n        continue;\n      }\n      const index = this.column.length;\n      this.column[index] = {\n        ...{\n          align: Align.left,\n          allowEdit: true,\n          index,\n          leftPos: 0,\n          orginalCol: col[i],\n          rightPos: 0,\n          width: 50\n        },\n        ...col[i]\n      };\n      if (this.column[index].field === "__idxnum__" || this.column[index].field === "__rownum__") {\n        this.column[index].allowEdit = false;\n      }\n    }\n    this.needToCalc = true;\n    this.calcColumn();\n  }\n  addEvent(eventName, event) {\n    this.getEvent(eventName).push(event);\n  }\n  removeEvent(eventName, event) {\n    const e = this.getEvent(eventName);\n    const index = e.indexOf(event);\n    if (index !== -1) {\n      e.splice(index, 1);\n    }\n  }\n  setUpdateData(row, field, data) {\n    const oldData = this.getUpdateDataOrData(row, field);\n    if (!this.editData[row]) {\n      this.editData[row] = {};\n    }\n    this.editData[row][field] = data;\n    this.fireEdit(row, field, data, oldData);\n  }\n  getUpdateData(row, field) {\n    const rowData = this.editData[row];\n    if (!rowData) {\n      return undefined;\n    }\n    if (rowData.hasOwnProperty(field)) {\n      return {\n        data: rowData[field]\n      };\n    }\n    return undefined;\n  }\n  getUpdateDataOrData(row, field) {\n    const rowData = this.editData[row];\n    if (rowData && rowData.hasOwnProperty(field)) {\n      return rowData[field];\n    }\n    return this.data[row][field];\n  }\n  logError(value, value2, value3) {\n    console.log(value, value2, value3);\n  }\n  setR(r) {\n    if (this.r === r) {\n      return;\n    }\n    this.r = r;\n    this.needToCalc = true;\n  }\n  setIsFocus(isFocus) {\n    if (this.isFocus !== isFocus) {\n      this.isFocus = isFocus;\n      if (this.allowEdit) {\n        this.askForReDraw();\n      }\n    }\n  }\n  fireEdit(row, col, newData, oldData) {\n    let i;\n    for (i = 0; i < this.eventEdit.length; i++) {\n      try {\n        this.eventEdit[i](this, row, col, newData, oldData);\n      } catch {\n        this.logError("eventEdit");\n      }\n    }\n  }\n  fireDblClick(row, col) {\n    let i;\n    for (i = 0; i < this.eventDblClick.length; i++) {\n      try {\n        this.eventDblClick[i](this, row, col === null ? null : col.orginalCol);\n      } catch {\n        this.logError("fireDblClick");\n      }\n    }\n  }\n  fireClick(row, col) {\n    let i;\n    for (i = 0; i < this.eventClick.length; i++) {\n      try {\n        this.eventClick[i](this, row, col === null ? null : col.orginalCol);\n      } catch {\n        this.logError("fireClick");\n      }\n    }\n  }\n  fireClickHeader(col) {\n    let i;\n    for (i = 0; i < this.eventClick.length; i++) {\n      try {\n        this.eventClickHeader[i](this, col === null ? null : col.orginalCol);\n      } catch {\n        this.logError("fireClickHeader");\n      }\n    }\n  }\n  clickOnHeader(col) {\n    if (col) {\n      if (this.sortCol && this.sortCol.length === 1 && this.sortCol[0].col === col.orginalCol && this.sortCol[0].sort === Sort.ascending) {\n        this.setSort([{\n          col: col.orginalCol,\n          sort: Sort.descending\n        }]);\n      } else {\n        this.setSort([{\n          col: col.orginalCol,\n          sort: Sort.ascending\n        }]);\n      }\n    }\n  }\n  wheel(deltaMode, deltaX, deltaY) {\n    if (this.scrollView) {\n      this.scrollView.onScroll(deltaMode, deltaX, deltaY);\n    }\n  }\n  dblClick(x, y) {\n    const col = this.findColByPos(x);\n    if (y <= this.headerHeight) {\n      return;\n    }\n    const row = this.findRowByPos(y);\n    if (this.allowEdit && row && typeof row.select === "number" && col !== null) {\n      if (!col.allowEdit) {\n        return;\n      }\n      this.updateForEdit(col, row.select);\n    }\n    this.fireDblClick(row === null ? null : row.select, col);\n  }\n  mouseDown(x, y) {\n    if (this.dataIndex === undefined) {\n      return;\n    }\n    if (this.scrollView && this.scrollView.onMouseDown(x, y)) {\n      return;\n    }\n    const col = this.findColByPos(x);\n    if (y <= this.headerHeight) {\n      const colSplit = this.findColSplit(x);\n      if (colSplit !== null) {\n        this.columnResize = {\n          x,\n          col: this.column[colSplit]\n        };\n        this.askForExtentedMouseMoveAndMaouseUp();\n        this.fireClickHeader(col);\n        return;\n      }\n      this.clickOnHeader(col);\n      this.fireClickHeader(col);\n      return;\n    }\n    const row = this.findRowByPos(y);\n    if (row && typeof row.select === "number" && col !== null) {\n      if (this.selectColValue !== col || this.selectRowValue !== row) {\n        this.selectColValue = col;\n        this.selectRowValue = row;\n        this.askForReDraw();\n      }\n    }\n    this.fireClick(row === null ? null : row.select, col);\n  }\n  mouseMove(x, y) {\n    if (!this.scrollView) {\n      return;\n    }\n    if (this.resizeColIfNeed(x)) {\n      return;\n    }\n    if (this.scrollView.onMouseMove(x, y)) {\n      this.setCursor();\n      return;\n    }\n    if (y < this.headerHeight && this.findColSplit(x) !== null) {\n      this.setCursor("col-resize");\n    } else {\n      this.setCursor();\n    }\n  }\n  mouseUp(x, y) {\n    if (this.columnResize) {\n      this.columnResize = undefined;\n      this.askForNormalMouseMoveAndMaouseUp();\n    }\n    if (this.scrollView && this.scrollView.onMouseUp(x, y)) {\n      return;\n    }\n  }\n  mouseMoveExtended(x, y) {\n    if (this.resizeColIfNeed(x)) {\n      return;\n    }\n    if (this.scrollView && this.scrollView.onExtendedMouseMove(x, y)) {\n      return;\n    }\n  }\n  mouseUpExtended(x, y) {\n    if (this.columnResize) {\n      this.columnResize = undefined;\n      this.askForNormalMouseMoveAndMaouseUp();\n    }\n    if (this.scrollView && this.scrollView.onExtendedMouseUp(x, y)) {\n      return;\n    }\n  }\n  keydown(keycode) {\n    if (this.scrollView !== undefined && this.selectColValue !== undefined && this.selectRowValue !== null && typeof this.selectRowValue.select === "number") {\n      const index = this.selectRowValue.path[this.selectRowValue.path.length - 1];\n      let y;\n      switch (keycode) {\n        case 40:\n          // Down\n          if (this.selectRowValue.index === index.list.length - 1) {\n            return;\n          }\n          this.selectRowValue.index++;\n          this.selectRowValue.select = index.list[this.selectRowValue.index];\n          y = this.findTopPosByRow(this.selectRowValue);\n          if (y !== undefined) {\n            y = y - (this.canvasHeight - (this.headerHeight + (this.scrollView.getHasScrollBarX() ? this.scrollView.getScrollbarSize() : 0)) * this.r);\n            if (this.scrollView.getPosY() < y) {\n              this.scrollView.setPosY(y);\n            }\n          }\n          this.askForReDraw();\n          break;\n        case 38:\n          // Up\n          if (this.selectRowValue.index === 0) {\n            return;\n          }\n          this.selectRowValue.index--;\n          this.selectRowValue.select = index.list[this.selectRowValue.index];\n          y = this.findTopPosByRow(this.selectRowValue);\n          if (y !== undefined) {\n            y = y - this.headerHeight * this.r;\n            if (this.scrollView.getPosY() > y) {\n              this.scrollView.setPosY(y);\n            }\n          }\n          this.askForReDraw();\n          break;\n        case 37:\n          // Left\n          if (this.selectColValue.index === 0) {\n            return;\n          }\n          this.selectColValue = this.column[this.selectColValue.index - 1];\n          if (this.selectColValue.leftPos < this.scrollView.getPosX()) {\n            this.scrollView.setPosX(this.selectColValue.leftPos);\n          }\n          this.askForReDraw();\n          break;\n        case 39:\n          // Right\n          if (this.selectColValue.index === this.column.length - 1) {\n            return;\n          }\n          this.selectColValue = this.column[this.selectColValue.index + 1];\n          if (this.selectColValue.rightPos > this.scrollView.getPosX() + this.canvasWidth) {\n            this.scrollView.setPosX(this.selectColValue.rightPos - this.canvasWidth);\n          }\n          this.askForReDraw();\n          break;\n        case 13:\n          // Enter\n          if (this.allowEdit && typeof this.selectRowValue.select === "number") {\n            if (!this.selectColValue.allowEdit) {\n              return;\n            }\n            this.updateForEdit(this.selectColValue, this.selectRowValue.select);\n          }\n        default:\n          break;\n      }\n    }\n  }\n  calcRect(col, row) {\n    if (!this.scrollView) {\n      return;\n    }\n    const topPos = this.findTopPosByRow(row);\n    if (topPos === undefined) {\n      return;\n    }\n    const y = (topPos - this.scrollView.getPosY()) / this.r;\n    const x = -(this.scrollView.getPosX() / this.r) + col.leftPos / this.r;\n    const top = y;\n    const left = x;\n    let clipTop;\n    const clipRight = undefined;\n    const clipBottom = undefined;\n    let clipLeft;\n    if (y < this.headerHeight) {\n      // rect(<top>, <right>, <bottom>, <left>)\n      if (x < 0) {\n        clipTop = -y + this.headerHeight;\n        clipLeft = -x;\n      } else {\n        clipTop = -y + this.headerHeight;\n      }\n    } else if (x < 0) {\n      clipLeft = -x;\n    }\n    return {\n      cellHeight: this.cellHeight,\n      clipBottom,\n      clipLeft,\n      clipRight,\n      clipTop,\n      left,\n      top,\n      width: col.width,\n      x,\n      y\n    };\n  }\n  findColSplit(x) {\n    if (this.scrollView === undefined) {\n      return null;\n    }\n    const posXNeg = -this.scrollView.getPosX();\n    for (let i = 0; i < this.column.length; i++) {\n      const d = (posXNeg + this.column[i].rightPos) / this.r - x;\n      if (-3 <= d && d <= 3) {\n        return i;\n      }\n    }\n    return null;\n  }\n  findColByPos(x) {\n    if (this.scrollView === undefined) {\n      return null;\n    }\n    const pos = this.scrollView.getPosX() / this.r + x;\n    let w = 0;\n    let i;\n    for (i = 0; i < this.column.length; i++) {\n      w += this.column[i].width;\n      if (w >= pos) {\n        return this.column[i];\n      }\n    }\n    return null;\n  }\n  findRowByPos(y) {\n    if (this.dataIndex === undefined || this.scrollView === undefined) {\n      return null;\n    }\n    let pos = -this.scrollView.getPosY() / this.r + this.headerHeight;\n    const cellHeight = this.cellHeight;\n    const find = items => {\n      let i;\n      const h = items.list.length * cellHeight;\n      if (y > pos + h) {\n        pos += h;\n      } else {\n        i = Math.trunc((-pos + y) / cellHeight);\n        pos += i * cellHeight;\n        if (i < items.list.length) {\n          return {\n            path: [items],\n            select: items.list[i],\n            index: i\n          };\n        }\n        return null;\n      }\n      return null;\n    };\n    return find(this.dataIndex.index);\n  }\n  findTopPosByRow(rowValue) {\n    if (this.dataIndex === undefined || this.scrollView === undefined || rowValue === null) {\n      return undefined;\n    }\n    let row;\n    if (typeof rowValue === "number") {\n      row = rowValue;\n    } else if (typeof rowValue.select === "number") {\n      row = rowValue.select;\n    }\n    let pos = this.headerHeight * this.r;\n    const cellHeight = this.cellHeight * this.r;\n    const find = items => {\n      let i;\n      if (row === undefined) {\n        pos += cellHeight * items.list.length;\n      } else {\n        for (i = 0; i < items.list.length; i++) {\n          if (items.list[i] === row) {\n            return pos;\n          }\n          pos += cellHeight;\n        }\n      }\n      return undefined;\n    };\n    return find(this.dataIndex.index);\n  }\n  calcIndex() {\n    if (this.data === undefined) {\n      return;\n    }\n    const index = [];\n    let i;\n    for (i = 0; i < this.data.length; i++) {\n      index[index.length] = i;\n    }\n    const sortCol = this.sortCol;\n    if (sortCol && sortCol.length) {\n      index.sort((a, b) => {\n        let sortColIndex;\n        for (sortColIndex = 0; sortColIndex < sortCol.length; sortColIndex++) {\n          let d;\n          const col = sortCol[sortColIndex];\n          switch (col.col.field) {\n            case "__rownum__":\n              d = a - b;\n              if (d !== 0) {\n                return d * col.sort;\n              }\n              break;\n            default:\n              const da = this.getUpdateDataOrData(a, col.col.field);\n              const db = this.getUpdateDataOrData(b, col.col.field);\n              if (da === undefined || da === null) {\n                if (db === undefined || db === null) {\n                  continue;\n                }\n                return col.sort;\n              }\n              if (db === undefined || db === null) {\n                return -1 * col.sort;\n              }\n              if (typeof da === "string" && typeof db === "string") {\n                if (da === "") {\n                  if (db === "") {\n                    continue;\n                  }\n                  return col.sort;\n                }\n                if (db === "") {\n                  return -1 * col.sort;\n                }\n                d = da.localeCompare(db);\n                if (d !== 0) {\n                  return d * col.sort;\n                }\n                continue;\n              }\n              if (da > db) {\n                return col.sort;\n              }\n              if (da < db) {\n                return -1 * col.sort;\n              }\n          }\n        }\n        return 0;\n      });\n    }\n    this.dataIndex = {\n      index: {\n        list: index\n      }\n    };\n  }\n  reCalcForScrollView() {\n    if (this.dataIndex === undefined) {\n      return;\n    }\n    let w = 1;\n    if (this.column) {\n      for (let i = 0; i < this.column.length; i++) {\n        w += this.column[i].width;\n      }\n    } else {\n      w = undefined;\n    }\n    const h = this.cellHeight * this.dataIndex.index.list.length;\n    if (this.scrollView && w !== undefined) {\n      this.scrollView.setSize(this.r, this.canvasWidth, this.canvasHeight, this.headerHeight, w * this.r, h * this.r);\n    }\n  }\n  setCanvasSize(width, height) {\n    this.canvasWidth = width;\n    this.canvasHeight = height;\n    this.reCalcForScrollView();\n  }\n  doReize(width, height) {\n    this.setCanvasSize(width * this.r, height * this.r);\n  }\n  drawCanvas() {\n    if (!this.scrollView || !this.context || !this.dataIndex) {\n      return;\n    }\n    if (this.needToCalc) {\n      this.calcColumn();\n    }\n    if (this.drawconf !== undefined && this.drawconf.fulldraw) {\n      this.drawconf = undefined;\n    }\n    const drawConf = this.drawconf;\n    this.drawconf = undefined;\n    this.requestAnimationFrame = undefined;\n    if (this.scrollView.beforeDraw()) {\n      this.askForReDraw();\n    }\n    if (drawConf === undefined) {\n      this.context.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    }\n    this.context.fillStyle = this.config.fontColor;\n    this.context.strokeStyle = this.config.lineColor;\n    this.context.font = this.config.fontStyle + " " + this.config.fontSize * this.r + "px " + this.config.font;\n    this.minFontWidth = this.context.measureText("i").width;\n    this.maxFontWidth = this.context.measureText("Æ").width;\n    const posX = this.scrollView.getPosX();\n    const headerHeight = this.headerHeight * this.r;\n    const offsetLeft = 14 * this.r; // font offset\n    const colStart = 0;\n    const colEnd = this.column.length;\n    const height = this.cellHeight * this.r;\n    const index = this.dataIndex.index;\n    const maxPos = this.canvasHeight + height + 4 * this.r;\n\n    // draw data-row item\n    let i = Math.max(0, Math.floor((this.scrollView.getPosY() - headerHeight) / height)); // row-index\n    let pos = -this.scrollView.getPosY() + headerHeight + (i + 1) * height; // y-axis coordinate \n    while (pos < maxPos && i < index.list.length) {\n      this.drawRowItem(this.context, index.list[i], i, pos, posX, height, offsetLeft, colStart, colEnd, drawConf);\n      pos += height;\n      i++;\n    }\n\n    // draw data-row vertical line\n    this.context.beginPath();\n    const end = pos - height;\n    const firstLine = -posX + this.column[colStart].leftPos;\n    this.context.moveTo(firstLine, headerHeight);\n    this.context.lineTo(firstLine, end);\n    for (let col = colStart; col < colEnd; col++) {\n      const rightPos = -posX + this.column[col].rightPos;\n      this.context.moveTo(rightPos, headerHeight);\n      this.context.lineTo(rightPos, end);\n    }\n    this.context.stroke();\n\n    // draw table header\n    this.context.font = this.config.headerFontStyle + " " + this.config.headerFontSize * this.r + "px " + this.config.headerFont;\n    this.context.fillStyle = this.config.headerFontColor;\n    this.context.clearRect(0, 0, this.canvasWidth, headerHeight);\n\n    // draw header row item\n    this.context.textAlign = "left";\n    for (let col = colStart; col < colEnd; col++) {\n      let needClip;\n      const colItem = this.column[col];\n      const colWidth = this.column[col].width * this.r - offsetLeft * 2;\n      const data = this.column[col].header;\n      if (colWidth > data.length * this.maxFontWidth) {\n        needClip = false;\n      } else if (colWidth < data.length * this.minFontWidth) {\n        needClip = true;\n      } else {\n        needClip = colWidth < this.context.measureText(data).width;\n      }\n      this.context.fillStyle = this.config.headerBackgroundColor;\n      const rectX = -posX + colItem.leftPos;\n      if (needClip) {\n        this.context.fillRect(rectX, 0, colItem.width * this.r, headerHeight);\n        this.context.save();\n        this.context.beginPath();\n        this.context.rect(rectX + offsetLeft, 0, colItem.width * this.r - offsetLeft * 2, headerHeight);\n        this.context.clip();\n        this.context.fillStyle = this.config.headerFontColor;\n        this.context.fillText(data, rectX + offsetLeft, headerHeight - 14 * this.r);\n        this.context.restore();\n      } else {\n        this.context.fillRect(rectX, 0, colItem.width * this.r, headerHeight);\n        this.context.fillStyle = this.config.headerFontColor;\n        this.context.fillText(data, rectX + offsetLeft, headerHeight - 14 * this.r);\n      }\n\n      // draw sort arrow\n      if (this.config.headerDrawSortArrow) {\n        let sort;\n        if (this.sortCol) {\n          let sortIndex;\n          for (sortIndex = 0; sortIndex < this.sortCol.length; sortIndex++) {\n            if (this.sortCol[sortIndex].col === this.column[col].orginalCol) {\n              sort = this.sortCol[sortIndex].sort;\n              break;\n            }\n          }\n        }\n        if (sort !== undefined) {\n          this.context.fillStyle = this.config.headerDrawSortArrowColor;\n          const startX = -posX + this.column[col].rightPos;\n          if (sort === Sort.ascending) {\n            this.context.beginPath();\n            this.context.moveTo(startX - 20 * this.r, 14 * this.r);\n            this.context.lineTo(startX - 10 * this.r, 14 * this.r);\n            this.context.lineTo(startX - 15 * this.r, 20 * this.r);\n            this.context.fill();\n          } else {\n            this.context.beginPath();\n            this.context.moveTo(startX - 15 * this.r, 14 * this.r);\n            this.context.lineTo(startX - 20 * this.r, 20 * this.r);\n            this.context.lineTo(startX - 10 * this.r, 20 * this.r);\n            this.context.fill();\n          }\n        }\n      }\n    }\n\n    // draw header vertical line\n    this.context.beginPath();\n    this.context.strokeStyle = this.config.lineColor;\n    const leftPos = -this.scrollView.getPosX() + this.column[colStart].leftPos;\n    this.context.moveTo(leftPos, 0);\n    this.context.lineTo(leftPos, headerHeight);\n    for (let col = colStart; col < colEnd; col++) {\n      const rightPos = -this.scrollView.getPosX() + this.column[col].rightPos;\n      this.context.moveTo(rightPos, 0);\n      this.context.lineTo(rightPos, headerHeight);\n    }\n    this.context.stroke();\n\n    // draw scroll bar\n    this.scrollView.draw();\n  }\n  calcColumn() {\n    this.needToCalc = false;\n    let leftPos = 1;\n    let i;\n    for (i = 0; i < this.column.length; i++) {\n      this.column[i].leftPos = leftPos;\n      leftPos += this.column[i].width * this.r;\n      this.column[i].rightPos = leftPos;\n    }\n    this.reCalcForScrollView();\n  }\n  getEvent(eventName) {\n    switch (eventName) {\n      case "click":\n        return this.eventClick;\n      case "dblClick":\n        return this.eventDblClick;\n      case "clickHeader":\n        return this.eventClickHeader;\n      case "reCalcForScrollView":\n        return this.eventReCalcForScrollView;\n      case "edit":\n        return this.eventEdit;\n      default:\n        throw new Error("unknown;");\n    }\n  }\n  resizeColIfNeed(x) {\n    if (this.columnResize === undefined) {\n      return false;\n    }\n    const d = x - this.columnResize.x;\n    const col = this.columnResize.col;\n    if (d === 0 || col.width + d < 10) {\n      return true;\n    }\n    col.width += d;\n    this.columnResize.x = x;\n    col.orginalCol.width = col.width;\n    this.calcColumn();\n    this.askForReDraw();\n    return true;\n  }\n  getDrawData(colItem, rowId, indexId) {\n    let data;\n    switch (colItem.field) {\n      case "__rownum__":\n        data = rowId.toString();\n        break;\n      case "__idxnum__":\n        data = indexId.toString();\n        break;\n      default:\n        data = String(this.getUpdateDataOrData(rowId, colItem.field));\n    }\n    if (colItem.customData) {\n      data = colItem.customData(this, data, this.data[rowId], this.data, rowId, colItem);\n    }\n    return data;\n  }\n  drawRowItem(context, indexId, i, pos, posX, height, offsetLeft, colStart, colEnd, drawConf) {\n    if (drawConf !== undefined && drawConf.drawOnly !== undefined) {\n      let found = false;\n      for (let index = 0; index < drawConf.drawOnly.length; index++) {\n        if (drawConf.drawOnly[index] === indexId) {\n          found = true;\n          break;\n        }\n      }\n      if (!found) {\n        return;\n      }\n    }\n    const isSepra = i % 2 === 0;\n    for (let col = colStart; col < colEnd; col++) {\n      const colItem = this.column[col];\n      const data = this.getDrawData(colItem, indexId, i);\n      let customStyle;\n      if (this.customRowColStyle) {\n        try {\n          customStyle = this.customRowColStyle(this.data, this.data[indexId], colItem.orginalCol, isSepra, data);\n        } catch {\n          this.logError("Canvas Table customRowColStyle");\n        }\n      }\n      if (!customStyle) {\n        customStyle = {};\n      }\n      let needClip;\n      const colWidth = colItem.width * this.r - offsetLeft * 2;\n      if (data === null || data === undefined) {\n        return;\n      }\n      if (colWidth > data.length * this.maxFontWidth) {\n        needClip = false;\n      } else if (colWidth < data.length * this.minFontWidth) {\n        needClip = true;\n      } else {\n        needClip = colWidth < context.measureText(data).width;\n      }\n      let x;\n      switch (customStyle.align === undefined ? colItem.align : customStyle.align) {\n        case Align.left:\n        default:\n          x = colItem.leftPos + offsetLeft;\n          if (context.textAlign !== "left") {\n            context.textAlign = "left";\n          }\n          break;\n        case Align.right:\n          x = colItem.rightPos - offsetLeft;\n          if (context.textAlign !== "right") {\n            context.textAlign = "right";\n          }\n          break;\n        case Align.center:\n          x = colItem.leftPos + offsetLeft + colWidth * 0.5;\n          if (context.textAlign !== "center") {\n            context.textAlign = "center";\n          }\n          break;\n      }\n      if (customStyle.backgroundColor !== undefined) {\n        context.fillStyle = customStyle.backgroundColor;\n      } else {\n        context.fillStyle = isSepra ? this.config.sepraBackgroundColor : this.config.backgroundColor;\n      }\n      let lastFont;\n      if (customStyle.font !== undefined || customStyle.fontSize !== undefined || customStyle.fontStyle !== undefined) {\n        lastFont = context.font;\n        context.font = (customStyle.fontStyle === undefined ? this.config.fontStyle : customStyle.fontStyle) + " " + (customStyle.fontSize === undefined ? this.config.fontSize : customStyle.fontSize) * this.r + "px " + (customStyle.font === undefined ? this.config.font : customStyle.font);\n      }\n      const rectX = -posX + colItem.leftPos;\n      const rectY = pos - height;\n      if (needClip) {\n        context.fillRect(rectX, rectY, colItem.width * this.r, height);\n        context.save();\n        context.beginPath();\n        context.rect(rectX + offsetLeft, rectY, colItem.width * this.r - offsetLeft * 2, height);\n        context.clip();\n        context.fillStyle = customStyle.fontColor === undefined ? this.config.fontColor : customStyle.fontColor;\n        context.fillText(data, -posX + x, pos - 14 * this.r);\n        context.restore();\n      } else {\n        context.fillRect(rectX, rectY, colItem.width * this.r, height);\n        context.fillStyle = customStyle.fontColor === undefined ? this.config.fontColor : customStyle.fontColor;\n        context.fillText(data, -posX + x, pos - 14 * this.r);\n      }\n      if (lastFont) {\n        context.font = lastFont;\n      }\n    }\n\n    // draw horizontal line\n    if (drawConf === undefined) {\n      context.beginPath();\n      context.moveTo(0, pos);\n      context.lineTo(Math.min(-posX + this.column[this.column.length - 1].rightPos, this.canvasWidth), pos);\n      context.stroke();\n    }\n\n    // draw select box\n    if (this.allowEdit && this.isFocus && this.selectRowValue && this.selectRowValue.select === indexId && this.selectColValue !== undefined) {\n      for (let col = colStart; col < colEnd; col++) {\n        if (this.selectColValue.index === col) {\n          const lastStroke = context.strokeStyle;\n          const lastLineWidth = context.lineWidth;\n          context.strokeStyle = this.config.selectLineColor;\n          context.lineWidth = 3;\n          context.beginPath();\n          context.rect(-posX + this.selectColValue.leftPos + 2 * this.r, pos - this.cellHeight * this.r + 2 * this.r, this.selectColValue.width * this.r - 4 * this.r, this.cellHeight * this.r - 4 * this.r);\n          context.stroke();\n          context.strokeStyle = lastStroke;\n          context.lineWidth = lastLineWidth;\n          break;\n        }\n      }\n    }\n  }\n}\n;// CONCATENATED MODULE: ./src/core/types/OffscreenCanvasTableMessage.ts\nlet OffscreenCanvasMesssageType = /*#__PURE__*/function (OffscreenCanvasMesssageType) {\n  OffscreenCanvasMesssageType[OffscreenCanvasMesssageType["create"] = 0] = "create";\n  OffscreenCanvasMesssageType[OffscreenCanvasMesssageType["resize"] = 1] = "resize";\n  OffscreenCanvasMesssageType[OffscreenCanvasMesssageType["expendAll"] = 2] = "expendAll";\n  OffscreenCanvasMesssageType[OffscreenCanvasMesssageType["collapseAll"] = 3] = "collapseAll";\n  OffscreenCanvasMesssageType[OffscreenCanvasMesssageType["setGroupBy"] = 4] = "setGroupBy";\n  OffscreenCanvasMesssageType[OffscreenCanvasMesssageType["scroll"] = 10] = "scroll";\n  OffscreenCanvasMesssageType[OffscreenCanvasMesssageType["focus"] = 15] = "focus";\n  OffscreenCanvasMesssageType[OffscreenCanvasMesssageType["mouseDown"] = 20] = "mouseDown";\n  OffscreenCanvasMesssageType[OffscreenCanvasMesssageType["mouseMove"] = 21] = "mouseMove";\n  OffscreenCanvasMesssageType[OffscreenCanvasMesssageType["mouseUp"] = 22] = "mouseUp";\n  OffscreenCanvasMesssageType[OffscreenCanvasMesssageType["mouseMoveExtended"] = 24] = "mouseMoveExtended";\n  OffscreenCanvasMesssageType[OffscreenCanvasMesssageType["mouseUpExtended"] = 25] = "mouseUpExtended";\n  OffscreenCanvasMesssageType[OffscreenCanvasMesssageType["mouseDblClick"] = 26] = "mouseDblClick";\n  OffscreenCanvasMesssageType[OffscreenCanvasMesssageType["keyDown"] = 40] = "keyDown";\n  OffscreenCanvasMesssageType[OffscreenCanvasMesssageType["askForExtentedMouseMoveAndMaouseUp"] = 100] = "askForExtentedMouseMoveAndMaouseUp";\n  OffscreenCanvasMesssageType[OffscreenCanvasMesssageType["askForNormalMouseMoveAndMaouseUp"] = 101] = "askForNormalMouseMoveAndMaouseUp";\n  OffscreenCanvasMesssageType[OffscreenCanvasMesssageType["setCursor"] = 102] = "setCursor";\n  OffscreenCanvasMesssageType[OffscreenCanvasMesssageType["updateForEdit"] = 103] = "updateForEdit";\n  OffscreenCanvasMesssageType[OffscreenCanvasMesssageType["removeUpdateForEdit"] = 104] = "removeUpdateForEdit";\n  OffscreenCanvasMesssageType[OffscreenCanvasMesssageType["locationForEdit"] = 105] = "locationForEdit";\n  OffscreenCanvasMesssageType[OffscreenCanvasMesssageType["onEditRemoveUpdateForEdit"] = 106] = "onEditRemoveUpdateForEdit";\n  return OffscreenCanvasMesssageType;\n}({});\n;// CONCATENATED MODULE: ./src/core/ScrollView.ts\nclass ScrollView {\n  canvasWidth = -1;\n  canvasHeight = -1;\n  r = 1;\n  // implement a delay effect for scrolling while holding down the button\n\n  hasScrollBarY = false;\n  /** \n   * mouse down - scrollBar Y\n   */\n  scrollBarThumbDownY = false;\n  /**\n   * flag - mouse over scroll element\n   */\n  isOverScrollUpY = false;\n  isOverScrollDownY = false;\n  isOverScollThumbY = false;\n  /**\n   * current scroll position value on Y\n   */\n  posYvalue = 0;\n  /**\n   * scrollBarY Range\n   */\n  scrollBarThumbMinY = -1;\n  scrollBarThumbMaxY = -1;\n  scrollBarPosMaxY = -1;\n  /**\n   * ratio: real_all_height / canvas_height\n   */\n  pageY = -1;\n  hasScrollBarX = false;\n  scrollBarThumbDownX = false;\n  isOverScrollUpX = false;\n  isOverScrollDownX = false;\n  isOverScollThumbX = false;\n  posXvalue = 0;\n  scrollBarThumbMinX = -1;\n  scrollBarThumbMaxX = -1;\n  scrollBarPosMaxX = -1;\n  pageX = -1;\n  scrollbarSize = 10;\n  arrowSize = 8;\n  cellHeight = 36;\n  run = false;\n  runXOrY = false;\n  speed = 1;\n  constructor(context, drawable, config, askForExtentedMouseMoveAndMaouseUp, askForNormalMouseMoveAndMaouseUp, scrollViewChange) {\n    this.scrollViewChange = scrollViewChange;\n    this.askForExtentedMouseMoveAndMaouseUp = askForExtentedMouseMoveAndMaouseUp;\n    this.askForNormalMouseMoveAndMaouseUp = askForNormalMouseMoveAndMaouseUp;\n    this.drawable = drawable;\n    this.context = context;\n    this.scrollViewConfig = {\n      ...{\n        backgroundColor: "#f0f0f0",\n        buttonColor: "#b0b0b0",\n        buttonHoverColor: "#808080"\n      },\n      ...config\n    };\n  }\n  getPosY() {\n    return this.posYvalue;\n  }\n  setPosY(value) {\n    if (!this.hasScrollBarY || value <= 0) {\n      value = 0;\n    }\n    if (value > 0 && value > this.scrollBarPosMaxY) {\n      value = this.scrollBarPosMaxY;\n    }\n    if (this.posYvalue !== value) {\n      this.posYvalue = value;\n      this.scrollViewChange.call(this.drawable);\n      this.drawable.askForReDraw();\n    }\n  }\n  getPosX() {\n    return this.posXvalue;\n  }\n  setPosX(value) {\n    if (!this.hasScrollBarX || value <= 0) {\n      value = 0;\n    }\n    if (value > 0 && value > this.scrollBarPosMaxX) {\n      value = this.scrollBarPosMaxX;\n    }\n    if (this.posXvalue !== value) {\n      this.posXvalue = value;\n      this.scrollViewChange.call(this.drawable);\n      this.drawable.askForReDraw();\n    }\n  }\n  getScrollBarPosMaxY() {\n    return this.scrollBarPosMaxY;\n  }\n  getScrollBarPosMaxX() {\n    return this.scrollBarPosMaxX;\n  }\n  getHasScrollBarY() {\n    return this.hasScrollBarY;\n  }\n  getHasScrollBarX() {\n    return this.hasScrollBarX;\n  }\n  getScrollbarSize() {\n    return this.scrollbarSize;\n  }\n  draw() {\n    if (this.height === undefined || this.width === undefined) {\n      return;\n    }\n    const padding = (this.scrollbarSize - this.arrowSize) / 2;\n    if (this.hasScrollBarY) {\n      const canvasHeight = this.canvasHeight - (this.hasScrollBarX ? this.scrollbarSize * this.r : 0);\n      const height = canvasHeight - this.r * this.arrowSize * 2 - this.r * 8;\n      const ratioY = this.scrollBarPosMaxY === 0 ? 1 : this.posYvalue / this.scrollBarPosMaxY;\n      const scrollBarSizeY = Math.max(18 * this.r, height / this.pageY);\n      const scrollBarPosY = this.arrowSize * this.r + ratioY * (height - scrollBarSizeY);\n      this.scrollBarThumbMinY = scrollBarPosY / this.r;\n      this.scrollBarThumbMaxY = (scrollBarPosY + scrollBarSizeY) / this.r;\n\n      // draw scroll bar background\n      this.context.fillStyle = this.scrollViewConfig.backgroundColor;\n      this.context.fillRect(this.canvasWidth - this.r * this.scrollbarSize, 0, this.r * this.scrollbarSize, canvasHeight);\n\n      // draw scroll up button\n      this.context.fillStyle = this.isOverScrollUpY ? this.scrollViewConfig.buttonHoverColor : this.scrollViewConfig.buttonColor;\n      this.context.beginPath();\n      this.context.moveTo(this.canvasWidth - this.r * this.scrollbarSize * 0.5, this.r * 2);\n      this.context.lineTo(this.canvasWidth - this.r * (this.arrowSize + padding), this.r * 10);\n      this.context.lineTo(this.canvasWidth - this.r * padding, this.r * 10);\n      this.context.fill();\n\n      // draw scroll down button\n      this.context.fillStyle = this.isOverScrollDownY ? this.scrollViewConfig.buttonHoverColor : this.scrollViewConfig.buttonColor;\n      this.context.beginPath();\n      this.context.moveTo(this.canvasWidth - this.r * this.scrollbarSize * 0.5, canvasHeight - this.r * 2);\n      this.context.lineTo(this.canvasWidth - this.r * (this.arrowSize + padding), canvasHeight - this.r * 10);\n      this.context.lineTo(this.canvasWidth - this.r * padding, canvasHeight - this.r * 10);\n      this.context.fill();\n\n      // draw scroll button\n      this.context.fillStyle = this.isOverScollThumbY ? this.scrollViewConfig.buttonHoverColor : this.scrollViewConfig.buttonColor;\n      this.context.beginPath();\n      this.context.rect(this.canvasWidth - this.r * (this.scrollbarSize - 1), scrollBarPosY + 4 * this.r, (this.scrollbarSize - 2) * this.r, scrollBarSizeY);\n      this.context.fill();\n    }\n    if (this.hasScrollBarX) {\n      const canvasWidth = this.canvasWidth - (this.hasScrollBarY ? this.scrollbarSize * this.r : 0);\n      const width = canvasWidth - this.r * this.arrowSize * 2 - this.r * 8;\n      const ratioX = this.scrollBarPosMaxX === 0 ? 1 : this.posXvalue / this.scrollBarPosMaxX;\n      const scrollBarSizeX = Math.max(18 * this.r, width / this.pageX);\n      const scrollBarPosX = this.arrowSize * this.r + ratioX * (width - scrollBarSizeX);\n      this.scrollBarThumbMinX = scrollBarPosX / this.r;\n      this.scrollBarThumbMaxX = (scrollBarPosX + scrollBarSizeX) / this.r;\n\n      // draw scroll bar background\n      this.context.fillStyle = this.scrollViewConfig.backgroundColor;\n      this.context.fillRect(0, this.canvasHeight - this.r * this.scrollbarSize, canvasWidth, this.r * this.scrollbarSize);\n\n      // draw scroll up button\n      this.context.fillStyle = this.isOverScrollUpX ? this.scrollViewConfig.buttonHoverColor : this.scrollViewConfig.buttonColor;\n      this.context.beginPath();\n      this.context.moveTo(this.r * 2, this.canvasHeight - this.r * this.scrollbarSize * 0.5);\n      this.context.lineTo(this.r * 10, this.canvasHeight - this.r * (this.arrowSize + padding));\n      this.context.lineTo(this.r * 10, this.canvasHeight - this.r * padding);\n      this.context.fill();\n\n      // draw scroll down button\n      this.context.fillStyle = this.isOverScrollDownX ? this.scrollViewConfig.buttonHoverColor : this.scrollViewConfig.buttonColor;\n      this.context.beginPath();\n      this.context.moveTo(canvasWidth - this.r * 2, this.canvasHeight - this.r * this.scrollbarSize * 0.5);\n      this.context.lineTo(canvasWidth - this.r * 10, this.canvasHeight - this.r * (this.arrowSize + padding));\n      this.context.lineTo(canvasWidth - this.r * 10, this.canvasHeight - this.r * padding);\n      this.context.fill();\n\n      // draw scroll button\n      this.context.fillStyle = this.isOverScollThumbX ? this.scrollViewConfig.buttonHoverColor : this.scrollViewConfig.buttonColor;\n      this.context.beginPath();\n      this.context.rect(scrollBarPosX + 4 * this.r, this.canvasHeight - this.r * (this.scrollbarSize - 1), scrollBarSizeX, (this.scrollbarSize - 2) * this.r);\n      this.context.fill();\n    }\n    if (this.hasScrollBarX && this.hasScrollBarY) {\n      this.context.fillStyle = this.scrollViewConfig.backgroundColor;\n      this.context.fillRect(this.canvasWidth - this.r * this.scrollbarSize, this.canvasHeight - this.r * this.scrollbarSize, this.r * this.scrollbarSize, this.r * this.scrollbarSize);\n    }\n  }\n  setSize(r, canvasWidth, canvasHeight, headerHeight, width, height) {\n    this.canvasHeight = canvasHeight;\n    this.canvasWidth = canvasWidth;\n    this.width = width;\n    this.height = height;\n    this.r = r;\n    if (this.height === undefined || this.width === undefined) {\n      this.hasScrollBarX = false;\n      this.hasScrollBarY = false;\n      this.scrollBarPosMaxX = 0;\n      this.scrollBarPosMaxY = 0;\n      return;\n    }\n    if (this.height / (this.canvasHeight - (headerHeight + this.scrollbarSize) * this.r) > 1 && this.width / (this.canvasWidth - this.scrollbarSize * this.r) > 1) {\n      // has X and Y\n      this.pageY = this.height / (this.canvasHeight - (headerHeight + this.scrollbarSize) * this.r);\n      this.hasScrollBarY = true;\n      this.scrollBarPosMaxY = this.height - (this.canvasHeight - (headerHeight + this.scrollbarSize) * this.r);\n      this.pageX = this.width / (this.canvasWidth - this.scrollbarSize * this.r);\n      this.hasScrollBarX = true;\n      this.scrollBarPosMaxX = this.width - (this.canvasWidth - this.scrollbarSize * this.r);\n    } else {\n      // has x or Y\n      this.pageY = this.height / (this.canvasHeight - headerHeight * this.r);\n      if (this.pageY < 1) {\n        this.hasScrollBarY = false;\n        this.scrollBarPosMaxY = 0;\n      } else {\n        this.hasScrollBarY = true;\n        this.scrollBarPosMaxY = this.height - (this.canvasHeight - headerHeight * this.r);\n      }\n      this.pageX = this.width / this.canvasWidth;\n      if (this.pageX < 1) {\n        this.hasScrollBarX = false;\n        this.scrollBarPosMaxX = 0;\n      } else {\n        this.hasScrollBarX = true;\n        this.scrollBarPosMaxX = this.width - this.canvasWidth;\n      }\n    }\n    if (this.posYvalue > this.scrollBarPosMaxY) {\n      this.setPosY(this.scrollBarPosMaxY);\n    }\n    if (this.posXvalue > this.scrollBarPosMaxX) {\n      this.setPosX(this.scrollBarPosMaxX);\n    }\n  }\n  beforeDraw() {\n    // runXOrY == true:  Y\n    // runXOrY == false: X\n    if (this.run) {\n      if (this.runXOrY) {\n        this.setPosY(this.posYvalue - this.speed * this.r);\n      } else {\n        this.setPosX(this.posXvalue - this.speed * this.r);\n      }\n      return true;\n    }\n    return false;\n  }\n  OnKeydown(keyCode) {\n    switch (keyCode) {\n      case 33:\n        // pagedown\n        this.setPosY(this.posYvalue - this.canvasHeight);\n        return true;\n      case 34:\n        // pageup\n        this.setPosY(this.posYvalue + this.canvasHeight);\n        return true;\n      case 38:\n        // up\n        this.setPosY(this.posYvalue - this.cellHeight * this.r);\n        return true;\n      case 40:\n        // down\n        this.setPosY(this.posYvalue + this.cellHeight * this.r);\n        return true;\n      default:\n        return false;\n    }\n  }\n  onScroll = (deltaMode, deltaX, deltaY) => {\n    switch (deltaMode) {\n      case 0:\n        // DOM_DELTA_PIXEL\t0x00\tThe delta values are specified in pixels.\n        this.setPosY(this.posYvalue + deltaY);\n        this.setPosX(this.posXvalue + deltaX);\n        break;\n      case 1:\n        // DOM_DELTA_LINE\t0x01\tThe delta values are specified in lines.\n        this.setPosY(this.posYvalue + deltaY * this.cellHeight * this.r);\n        this.setPosX(this.posXvalue + deltaX * this.cellHeight * this.r);\n        break;\n      case 2:\n        // DOM_DELTA_PAGE\t0x02\tThe delta values are specified in pages.\n        this.setPosY(this.posYvalue + deltaY * this.canvasHeight * this.r);\n        this.setPosX(this.posXvalue + deltaX * this.canvasWidth * this.r);\n        break;\n      default:\n        // uups\n        return;\n    }\n    this.fixPos();\n  };\n  onExtendedMouseUp(x, y) {\n    this.askForNormalMouseMoveAndMaouseUp.call(this.drawable);\n    this.scrollBarThumbDownY = false;\n    this.isOverScollThumbY = false;\n    this.scrollBarThumbDownX = false;\n    this.isOverScollThumbX = false;\n    this.drawMe();\n    return false;\n  }\n  onExtendedMouseMove(x, y) {\n    if (this.scrollBarThumbDownY) {\n      this.setPosY(this.scrollBarPosMaxY * ((y - this.arrowSize) / (this.canvasHeight / this.r - this.arrowSize * 2)));\n    }\n    if (this.scrollBarThumbDownX) {\n      this.setPosX(this.scrollBarPosMaxX * (x / (this.canvasWidth / this.r - this.arrowSize * 2)));\n    }\n    return true;\n  }\n  onMouseDown(x, y) {\n    return this.scrollClick(x, y, false);\n  }\n  onMouseMove(x, y) {\n    if (!this.hasScrollBarY && !this.hasScrollBarX) {\n      return false;\n    }\n    const canvasWidth = this.canvasWidth / this.r;\n    const canvasHeight = this.canvasHeight / this.r;\n\n    // right-bottom no element\n    if (this.hasScrollBarX && this.hasScrollBarY && x > canvasWidth - this.scrollbarSize && y > canvasHeight - this.scrollbarSize) {\n      if (this.isOverScrollUpY || this.isOverScollThumbY || this.isOverScrollDownY || this.isOverScrollUpX || this.isOverScollThumbX || this.isOverScrollDownX) {\n        this.isOverScrollUpY = false;\n        this.isOverScollThumbY = false;\n        this.isOverScrollDownY = false;\n        this.isOverScrollUpX = false;\n        this.isOverScollThumbX = false;\n        this.isOverScrollDownX = false;\n        this.drawMe();\n      }\n      return true;\n    }\n\n    // mouse not on scroll-bar element\n    if (this.hasScrollBarX && this.hasScrollBarY && x < canvasWidth - this.scrollbarSize && y < canvasHeight - this.scrollbarSize || !this.hasScrollBarX && this.hasScrollBarY && x < canvasWidth - this.scrollbarSize || this.hasScrollBarX && !this.hasScrollBarY && y < canvasHeight - this.scrollbarSize) {\n      if (this.isOverScrollUpY || this.isOverScollThumbY || this.isOverScrollDownY || this.isOverScrollUpX || this.isOverScollThumbX || this.isOverScrollDownX) {\n        this.isOverScrollUpY = false;\n        this.isOverScollThumbY = false;\n        this.isOverScrollDownY = false;\n        this.isOverScrollUpX = false;\n        this.isOverScollThumbX = false;\n        this.isOverScrollDownX = false;\n        this.drawMe();\n      }\n      return false;\n    }\n\n    // mouse on scroll-up button\n    if (this.hasScrollBarY && y < this.arrowSize + 2) {\n      if (!this.isOverScrollUpY || this.isOverScollThumbY || this.isOverScrollDownY || this.isOverScrollUpX || this.isOverScollThumbX || this.isOverScrollDownX) {\n        this.isOverScrollUpY = true;\n        this.isOverScollThumbY = false;\n        this.isOverScrollDownY = false;\n        this.isOverScrollUpX = false;\n        this.isOverScollThumbX = false;\n        this.isOverScrollDownX = false;\n        this.drawMe();\n      }\n      return true;\n    }\n\n    // mouse on scroll-down button\n    if (this.hasScrollBarY && x >= canvasWidth - this.scrollbarSize && y > this.canvasHeight / this.r - this.arrowSize - 2 - (this.hasScrollBarX ? this.scrollbarSize : 0)) {\n      if (this.isOverScrollUpY || this.isOverScollThumbY || !this.isOverScrollDownY || this.isOverScrollUpX || this.isOverScollThumbX || this.isOverScrollDownX) {\n        this.isOverScrollUpY = false;\n        this.isOverScollThumbY = false;\n        this.isOverScrollDownY = true;\n        this.isOverScrollUpX = false;\n        this.isOverScollThumbX = false;\n        this.isOverScrollDownX = false;\n        this.drawMe();\n      }\n      return true;\n    }\n\n    // mouse on scroll-bar\n    if (this.hasScrollBarY && this.scrollBarThumbMinY <= y && y <= this.scrollBarThumbMaxY) {\n      if (this.isOverScrollUpY || !this.isOverScollThumbY || this.isOverScrollDownY || this.isOverScrollUpX || this.isOverScollThumbX || this.isOverScrollDownX) {\n        this.isOverScrollUpY = false;\n        this.isOverScollThumbY = true;\n        this.isOverScrollDownY = false;\n        this.isOverScrollUpX = false;\n        this.isOverScollThumbX = false;\n        this.isOverScrollDownX = false;\n        this.drawMe();\n      }\n      return true;\n    }\n\n    // mouse on scroll-left button\n    if (this.hasScrollBarX && x < this.arrowSize + 2) {\n      if (!this.isOverScrollUpX || this.isOverScollThumbX || this.isOverScrollDownX || this.isOverScrollUpY || !this.isOverScollThumbY || this.isOverScrollDownY) {\n        this.isOverScrollUpX = true;\n        this.isOverScollThumbX = false;\n        this.isOverScrollDownX = false;\n        this.isOverScrollUpY = false;\n        this.isOverScollThumbY = false;\n        this.isOverScrollDownY = false;\n        this.drawMe();\n      }\n      return true;\n    }\n\n    // mouse on scroll-right button\n    if (this.hasScrollBarX && y >= canvasHeight - this.scrollbarSize && x > this.canvasWidth / this.r - this.arrowSize - 2 - (this.hasScrollBarY ? this.scrollbarSize : 0)) {\n      if (this.isOverScrollUpY || this.isOverScollThumbY || this.isOverScrollDownY || this.isOverScrollUpX || this.isOverScollThumbX || !this.isOverScrollDownX) {\n        this.isOverScrollUpY = false;\n        this.isOverScollThumbY = false;\n        this.isOverScrollDownY = false;\n        this.isOverScrollUpX = false;\n        this.isOverScollThumbX = false;\n        this.isOverScrollDownX = true;\n        this.drawMe();\n      }\n      return true;\n    }\n\n    // mouse on scroll-bar\n    if (this.hasScrollBarX && this.scrollBarThumbMinX <= x && x <= this.scrollBarThumbMaxX) {\n      if (this.isOverScrollUpY || this.isOverScollThumbY || this.isOverScrollDownY || this.isOverScrollUpX || !this.isOverScollThumbX || this.isOverScrollDownX) {\n        this.isOverScrollUpY = false;\n        this.isOverScollThumbY = false;\n        this.isOverScrollDownY = false;\n        this.isOverScrollUpX = false;\n        this.isOverScollThumbX = true;\n        this.isOverScrollDownX = false;\n        this.drawMe();\n      }\n      return true;\n    }\n    return true;\n  }\n  onMouseUp(x, y) {\n    this.scrollBarThumbDownY = false;\n    this.isOverScollThumbY = false;\n    this.scrollBarThumbDownX = false;\n    this.isOverScollThumbX = false;\n    this.drawMe();\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n      this.timeout = undefined;\n      this.run = false;\n    }\n    return false;\n  }\n  scrollClick(x, y, isTouch) {\n    if (!this.hasScrollBarY && !this.hasScrollBarX) {\n      return false;\n    }\n    const canvasWidth = this.canvasWidth / this.r;\n    const canvasHeight = this.canvasHeight / this.r;\n\n    // right-bottom no element\n    if (this.hasScrollBarX && this.hasScrollBarY && x > canvasWidth - this.scrollbarSize && y > canvasHeight - this.scrollbarSize) {\n      return true;\n    }\n\n    // mouse not on scroll-bar\n    if (this.hasScrollBarX && this.hasScrollBarY && x < canvasWidth - this.scrollbarSize && y < canvasHeight - this.scrollbarSize || !this.hasScrollBarX && this.hasScrollBarY && x < canvasWidth - this.scrollbarSize || this.hasScrollBarX && !this.hasScrollBarY && y < canvasHeight - this.scrollbarSize) {\n      return false;\n    }\n\n    // scroll-up\n    if (this.hasScrollBarY && y < this.arrowSize + 2) {\n      if (this.posYvalue === 0) {\n        return true;\n      }\n      this.setPosY(this.posYvalue - this.cellHeight * this.r);\n      this.timeout = setTimeout(() => {\n        this.speed = 7;\n        this.runXOrY = true;\n        this.run = true;\n        this.drawable.askForReDraw();\n      }, 500);\n      return true;\n    }\n\n    // scroll-down\n    if (this.hasScrollBarY && x >= canvasWidth - this.scrollbarSize && y > canvasHeight - this.arrowSize - 2 - (this.hasScrollBarX ? this.scrollbarSize : 0)) {\n      if (this.posYvalue === this.scrollBarPosMaxY) {\n        return true;\n      }\n      this.setPosY(this.posYvalue + this.cellHeight * this.r);\n      this.timeout = setTimeout(() => {\n        this.speed = -7;\n        this.runXOrY = true;\n        this.run = true;\n        this.drawable.askForReDraw();\n      }, 500);\n      return true;\n    }\n\n    // scroll-down\n    if (this.hasScrollBarY && x >= canvasWidth - this.scrollbarSize && y > this.scrollBarThumbMaxY) {\n      this.setPosY(this.posYvalue + canvasHeight - 20);\n      this.timeout = setTimeout(() => {\n        this.speed = -14;\n        this.runXOrY = true;\n        this.run = true;\n        this.drawable.askForReDraw();\n      }, 500);\n      return true;\n    }\n\n    // scroll-up\n    if (this.hasScrollBarY && x >= canvasWidth - this.scrollbarSize && y < this.scrollBarThumbMinY) {\n      this.setPosY(this.posYvalue - canvasHeight - 20);\n      this.timeout = setTimeout(() => {\n        this.speed = +14;\n        this.runXOrY = true;\n        this.run = true;\n        this.drawable.askForReDraw();\n      }, 500);\n      return true;\n    }\n    if (this.hasScrollBarY && x >= canvasWidth - this.scrollbarSize) {\n      this.scrollBarThumbDownY = true;\n    }\n\n    // scroll-left\n    if (this.hasScrollBarX && x < this.arrowSize + 2) {\n      if (this.posXvalue === 0) {\n        return true;\n      }\n      this.setPosX(this.posXvalue - this.cellHeight * this.r);\n      this.timeout = setTimeout(() => {\n        this.speed = +7;\n        this.runXOrY = false;\n        this.run = true;\n        this.drawable.askForReDraw();\n      }, 500);\n      return true;\n    }\n\n    // scroll-right\n    if (this.hasScrollBarX && y >= canvasHeight - this.scrollbarSize && x > canvasWidth - this.arrowSize - 2 - (this.hasScrollBarY ? this.scrollbarSize : 0)) {\n      if (this.posXvalue === this.scrollBarPosMaxY) {\n        return true;\n      }\n      this.setPosX(this.posXvalue + this.cellHeight * this.r);\n      this.timeout = setTimeout(() => {\n        this.speed = -7;\n        this.runXOrY = false;\n        this.run = true;\n        this.drawable.askForReDraw();\n      }, 500);\n      return true;\n    }\n\n    // scroll-right\n    if (this.hasScrollBarX && y >= canvasHeight - this.scrollbarSize && x > this.scrollBarThumbMaxX) {\n      this.setPosX(this.posXvalue + canvasHeight - 20);\n      this.timeout = setTimeout(() => {\n        this.speed = -14;\n        this.runXOrY = false;\n        this.run = true;\n        this.drawable.askForReDraw();\n      }, 500);\n      return true;\n    }\n\n    // scroll-left\n    if (this.hasScrollBarX && y >= canvasHeight - this.scrollbarSize && x < this.scrollBarThumbMinX) {\n      this.setPosX(this.posXvalue - canvasHeight - 20);\n      this.timeout = setTimeout(() => {\n        this.speed = +14;\n        this.runXOrY = false;\n        this.run = true;\n        this.drawable.askForReDraw();\n      }, 500);\n      return true;\n    }\n    if (this.hasScrollBarX && y >= canvasHeight - this.scrollbarSize) {\n      this.scrollBarThumbDownX = true;\n    }\n    if (!isTouch) {\n      this.askForExtentedMouseMoveAndMaouseUp.call(this.drawable);\n    }\n    return true;\n  }\n  drawMe() {\n    if (!this.drawable.isPlanToRedraw()) {\n      this.draw();\n    }\n  }\n  fixPos() {\n    if (!this.hasScrollBarY || this.posYvalue < 0) {\n      this.setPosY(0);\n    }\n    if (this.posYvalue > this.scrollBarPosMaxY) {\n      this.setPosY(this.scrollBarPosMaxY);\n    }\n    if (!this.hasScrollBarX || this.posXvalue < 0) {\n      this.setPosX(0);\n    }\n    if (this.posXvalue > this.scrollBarPosMaxX) {\n      this.setPosX(this.scrollBarPosMaxX);\n    }\n  }\n}\n;// CONCATENATED MODULE: ./src/core/OffscreenCanvasTableWorker.ts\n\n\n\n\n\nclass OffscreenCanvasTableWorker extends CustomCanvasTable {\n  constructor(offscreenCanvasTableId, col, config) {\n    super(config);\n    this.id = offscreenCanvasTableId;\n    this.updateColumns(col);\n  }\n  updateColumns(col) {\n    super.updateColumns(col);\n    const data = {\n      canvasTableId: this.id,\n      type: OffscreenCanvasMesssageType.removeUpdateForEdit\n    };\n    postMessage(data);\n    this.hasUpdateForEdit = undefined;\n  }\n  message(data) {\n    if (data.canvasTableId !== this.id) {\n      return;\n    }\n    switch (data.type) {\n      case OffscreenCanvasMesssageType.create:\n        this.canvas = data.offscreen;\n        this.setR(data.r);\n        const context = this.canvas.getContext("2d");\n        if (context === null) {\n          return;\n        }\n        this.scrollView = new ScrollView(context, this, this.config ? this.config.scrollView : undefined, this.askForExtentedMouseMoveAndMaouseUp, this.askForNormalMouseMoveAndMaouseUp, this.scrollViewChange);\n        this.context = context;\n        this.doReize(data.width, data.height);\n        this.askForReDraw();\n        break;\n      case OffscreenCanvasMesssageType.resize:\n        this.setR(data.r);\n        this.doReize(data.width, data.height);\n        this.askForReDraw();\n        break;\n      case OffscreenCanvasMesssageType.focus:\n        this.setIsFocus(data.focus);\n        break;\n      case OffscreenCanvasMesssageType.scroll:\n        this.wheel(data.deltaMode, data.deltaX, data.deltaY);\n        break;\n      case OffscreenCanvasMesssageType.mouseDown:\n        this.mouseDown(data.x, data.y);\n        break;\n      case OffscreenCanvasMesssageType.mouseMove:\n        this.mouseMove(data.x, data.y);\n        break;\n      case OffscreenCanvasMesssageType.mouseUp:\n        this.mouseUp(data.x, data.y);\n        break;\n      case OffscreenCanvasMesssageType.mouseDblClick:\n        this.dblClick(data.x, data.y);\n        break;\n      case OffscreenCanvasMesssageType.mouseMoveExtended:\n        this.mouseMoveExtended(data.x, data.y);\n        break;\n      case OffscreenCanvasMesssageType.mouseUpExtended:\n        this.mouseUpExtended(data.x, data.y);\n        break;\n      case OffscreenCanvasMesssageType.keyDown:\n        this.keydown(data.keycode);\n        break;\n      case OffscreenCanvasMesssageType.onEditRemoveUpdateForEdit:\n        this.onEditRemoveUpdateForEdit(data.cancel, data.col, data.newData, data.row);\n        break;\n    }\n  }\n  drawCanvas() {\n    if (this.context === undefined || this.dataIndex === undefined) {\n      this.requestAnimationFrame = undefined;\n      this.askForReDraw(this.drawconf);\n      return;\n    }\n    super.drawCanvas();\n  }\n  scrollViewChange() {\n    if (this.hasUpdateForEdit) {\n      const rect = this.calcRect(this.hasUpdateForEdit.col, this.hasUpdateForEdit.row);\n      if (!rect) {\n        return;\n      }\n      const data = {\n        canvasTableId: this.id,\n        rect,\n        type: OffscreenCanvasMesssageType.locationForEdit\n      };\n      postMessage(data);\n    }\n  }\n  updateForEdit(col, row) {\n    const rect = this.calcRect(col, row);\n    if (!rect) {\n      return;\n    }\n    const value = this.getUpdateDataOrData(row, col.field);\n    const data = {\n      cellHeight: this.cellHeight,\n      col,\n      canvasTableId: this.id,\n      rect,\n      row,\n      type: OffscreenCanvasMesssageType.updateForEdit,\n      value\n    };\n    postMessage(data);\n    this.hasUpdateForEdit = {\n      col,\n      row\n    };\n  }\n  setCanvasSize(width, height) {\n    if (this.canvas === undefined) {\n      return;\n    }\n    this.canvas.width = width;\n    this.canvas.height = height;\n    super.setCanvasSize(width, height);\n  }\n  setCursor(cursor = "") {\n    const data = {\n      cursor,\n      canvasTableId: this.id,\n      type: OffscreenCanvasMesssageType.setCursor\n    };\n    postMessage(data);\n  }\n  askForExtentedMouseMoveAndMaouseUp() {\n    const data = {\n      canvasTableId: this.id,\n      type: OffscreenCanvasMesssageType.askForExtentedMouseMoveAndMaouseUp\n    };\n    postMessage(data);\n  }\n  askForNormalMouseMoveAndMaouseUp() {\n    const data = {\n      canvasTableId: this.id,\n      type: OffscreenCanvasMesssageType.askForNormalMouseMoveAndMaouseUp\n    };\n    postMessage(data);\n  }\n  onEditRemoveUpdateForEdit(cancel, col, newData, row) {\n    this.hasUpdateForEdit = undefined;\n    if (cancel || col === undefined || row === undefined) {\n      return;\n    }\n    if (String(this.getUpdateDataOrData(row, col.field)) !== String(newData)) {\n      this.setUpdateData(row, col.field, newData);\n      this.askForReIndex();\n    }\n  }\n}\n;// CONCATENATED MODULE: ./src/worker.ts\n\nconst col = [{\n  header: "ID",\n  field: "__rownum__",\n  width: 100\n  //align: Align.center\n}, {\n  header: "Country",\n  field: "country",\n  width: 200\n}, {\n  header: "Name",\n  field: "name",\n  width: 200\n}, {\n  header: "Subcountry",\n  field: "subcountry",\n  width: 200\n}, {\n  header: "Geonameid",\n  field: "geonameid",\n  width: 200\n}];\nconst offscreenCanvasTableWorker = new OffscreenCanvasTableWorker(1, col);\noffscreenCanvasTableWorker.setAllowEdit(true);\nconst httpRequest = new XMLHttpRequest();\nhttpRequest.onreadystatechange = function () {\n  if (httpRequest.readyState === XMLHttpRequest.DONE) {\n    const data = JSON.parse(httpRequest.responseText);\n    offscreenCanvasTableWorker.setData(data);\n  }\n};\nhttpRequest.open(\'GET\', \'data.json\', true);\nhttpRequest.send();\naddEventListener(\'message\', message => {\n  if (message.data.canvasTableId !== undefined) {\n    offscreenCanvasTableWorker.message(message.data);\n    return;\n  }\n  postMessage(\'this is the response \' + message.data);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///736\n')}},__webpack_exports__={};__webpack_modules__[736]()})();